name: 'NuvlaEdge Validation'

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VALIDATION_PACKAGE_NAME: "validation-latest-py3-none-any.whl"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name || vars.GITHUB_REF_NAME }}

jobs:
  build-custom-validation:

    runs-on: ubuntu-latest

    steps:
      - name: CheckOut validation packages
        run: |
          git clone https://${{ secrets.VALIDATION_TOKEN_USERNAME }}:${{ secrets.VALIDATION_TOKEN_SECRET }}@github.com/nuvlaedge/validation.git --branch=feat-single-image

      - name: Test package download
        run: |
          ls -la validation/

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Load cached poetry
        uses: actions/cache@v2.1.6
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('poetry.lock') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build package
        working-directory: ./validation
        run: |
          poetry build --format=wheel

      - name: Create standard latest release
        working-directory: ./validation
        run: |
          mv ./dist/validation* ./dist/validation-latest-py3-none-any.whl

      - name: Save wheels and requirements as artifacts
        working-directory: ./validation
        uses: actions/upload-artifact@v3
        with:
          name: ${{github.ref_name}}
          path: |
            dist


  setup-matrix:
    needs: build-custom-validation
    runs-on: ubuntu-latest
    outputs:
      boards: ${{ steps.set-boards.outputs.boards }}
      tests: ${{ steps.set-tests.outputs.tests }}
    steps:
      - id: set-boards
        run: |
          echo "boards=${{ vars.TESTBED_BOARDS }}" >> $GITHUB_OUTPUT

      - id: set-tests
        run: |
          echo "tests=${{ vars.VALIDATION_TESTS }}" >> $GITHUB_OUTPUT

  run-validation:
    needs: setup-matrix
    strategy:
      matrix:
        board-config: ${{ fromJSON(needs.setup-matrix.outputs.boards) }}
        validation-type: ${{ fromJSON(needs.setup-matrix.outputs.tests) }}
      fail-fast: false
    runs-on: ${{ matrix.board-config }}

    steps:
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: CheckOut validation packages
        run: |
          curl -u "${{ secrets.VALIDATION_TOKEN_USERNAME }}:${{ secrets.VALIDATION_TOKEN_SECRET }}" \
          -H 'Accept: application/vnd.github.v3.raw' \
          -O --create-dirs --output-dir conf/targets/ \
          -L "https://api.github.com/repos/nuvlaedge/validation/contents/conf/targets/${{ matrix.board-config }}.toml"

      - name: Download requirements
        uses: actions/download-artifact@v3
        with:
          name: ${{github.ref_name}}

      - name: Install Validation Framework dependency
        run: python -m pip install ${{ env.VALIDATION_PACKAGE_NAME }}  --force-reinstall

      - name: Setup results folder
        run: |
          mkdir -p results/temp/xml results/temp/json

      - name: Clear previous results
        run: |
          rm results/temp/xml/*.xml || true

      - name: Run Validation on board ${{ matrix.board-config }}
        run: |
          python -m validation_framework --target ${{ matrix.board-config }}.toml \
          --key ${{ secrets.VALIDATION_NUVLA_API_KEY }} \
          --secret ${{ secrets.VALIDATION_NUVLA_API_SECRET }} \
          --validator ${{ matrix.validation-type }} \
          --branch ${{ env.BRANCH_NAME }}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          check_name: "| ${{ matrix.board-config }} --- ${{ matrix.validation-type }} |"
          junit_files: "results/temp/xml/*.xml"
