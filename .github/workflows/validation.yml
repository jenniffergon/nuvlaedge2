name: 'NuvlaEdge Validation'

on:
  workflow_dispatch:
    inputs:

      log_level:
        description: 'Edit the default log level (INFO) of the validation process'
        required: false
        type: choice
        default: 'INFO'
        options:
          - 'DEBUG'
          - 'INFO'
          - 'WARNING'
          - 'ERROR'

      deployment_branch:
        description: 'Select a branch in nuvlaedge/deployment repo to test against'
        required: false
        type: string

      nuvlaedge_version:
        description: 'A NuvlaEdge version can be provided to test against'
        required: false
        type: string

      retrieve_logs:
        # Logs are retrieved whenever there is an error on the validation
        description: 'Flag to always retrieve NuvlaEdge docker logs after validation'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VALIDATION_PACKAGE_NAME: "validation-1.0.0-py3-none-any.whl"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name || vars.GITHUB_REF_NAME }}

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      boards: ${{ steps.set-boards.outputs.boards }}
      tests: ${{ steps.set-tests.outputs.tests }}
    steps:
      - id: set-boards
        run: |
          echo "boards=${{ vars.TESTBED_BOARDS }}" >> $GITHUB_OUTPUT

      - id: set-tests
        run: |
          echo "tests=${{ vars.VALIDATION_TESTS }}" >> $GITHUB_OUTPUT

  run-validation:
    needs: setup-matrix
    strategy:
      matrix:
        board-config: ${{ fromJSON(needs.setup-matrix.outputs.boards) }}
        validation-type: ${{ fromJSON(needs.setup-matrix.outputs.tests) }}
      fail-fast: false
    runs-on: ${{ matrix.board-config }}

    steps:
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Retrieve target configuration
        run: |
          wget --user=${{ secrets.VALIDATION_TOKEN_USERNAME }} --password='${{ secrets.VALIDATION_TOKEN_SECRET }}' \
          -P conf/targets/
          https://github.com/nuvlaedge/validation/releases/download/1.0.0/${{ matrix.board-config }}.toml

#      - name: Retrieve target configuration
#        run: |
#          curl -u "${{ secrets.VALIDATION_TOKEN_USERNAME }}:${{ secrets.VALIDATION_TOKEN_SECRET }}" \
#          -H 'Accept: application/vnd.github.v3.raw' \
#          -O --create-dirs --output-dir conf/targets/ \
#          "https://api.github.com/repos/nuvlaedge/validation/releases/assets/1.0.0/${{ matrix.board-config }}.toml"

      - name: Check config file
        run: |
          ls -la conf/targets/
          cat conf/targets/${{ matrix.board-config }}.toml

      - name: Remove previous validation package
        run: |
          rm -f ${{ env.VALIDATION_PACKAGE_NAME }} || true
          rm -f dist/${{ env.VALIDATION_PACKAGE_NAME }} || true

      - name: Download Validation Framework dependency
        run: |
          curl -u "${{ secrets.VALIDATION_TOKEN_USERNAME }}:${{ secrets.VALIDATION_TOKEN_SECRET }}" \
          -H 'Accept: application/octet-stream' \
          -O --create-dirs --output-dir dist/ \
          -L "https://api.github.com/repos/nuvlaedge/validation/releases/assets/1.0.0/${{ env.VALIDATION_PACKAGE_NAME }}"

      - name: Install latest validation package
        run: |
          md5sum dist/${{ env.VALIDATION_PACKAGE_NAME }}
          pip install dist/${{ env.VALIDATION_PACKAGE_NAME }}  --force-reinstall

      - name: Setup results folder
        run: |
          mkdir -p results/temp/xml results/temp/json

      - name: Clear previous results
        run: |
          rm results/temp/xml/*.xml || true

      - name: Run Validation on board ${{ matrix.board-config }}
        run: |
          validation \
          --target ${{ matrix.board-config }}.toml \
          --key ${{ secrets.VALIDATION_NUVLA_API_KEY }} \
          --secret ${{ secrets.VALIDATION_NUVLA_API_SECRET }} \
          --validator ${{ matrix.validation-type }} \
          --nuvlaedge_version ${{ github.event.inputs.nuvlaedge_version }} \
          --deployment_branch ${{ github.event.inputs.deployment_branch }} \ 
          --nuvlaedge_branch ${{ env.BRANCH_NAME }} \
          --retrieve_logs ${{ github.event.inputs.retrieve_logs }}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          check_name: "| ${{ matrix.board-config }} --- ${{ matrix.validation-type }} |"
          junit_files: "results/temp/xml/*.xml"
