name: "NuvlaEdge release"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# It is important to trigger the release only when the main branch is updated since the release is against the branch
# that triggers this workflow
on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  trigger-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - id: release
        uses: google-github-actions/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target-branch: ${{ github.ref_name }}
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json


  publish-github:
    name: "Publish package to GitHub release"
    needs: trigger-release
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-0  # increment to reset cache

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Build library
        id: build
        run: |
          poetry build --no-interaction --format=wheel
          mkdir req/
          poetry export -f requirements.txt --output req/requirements.txt --without-hashes --without-urls
          poetry export -f requirements.txt --output req/requirements.agent.txt --without-hashes --without-urls --with agent
          poetry export -f requirements.txt --output req/requirements.system-manager.txt --without-hashes --without-urls --with system-manager
          poetry export -f requirements.txt --output req/requirements.network.txt --without-hashes --without-urls --with network
          poetry export -f requirements.txt --output req/requirements.modbus.txt --without-hashes --without-urls --with modbus
          poetry export -f requirements.txt --output req/requirements.gpu.txt --without-hashes --without-urls --with gpu
          poetry export -f requirements.txt --output req/requirements.job-engine.txt --without-hashes --without-urls --with job-engine
          poetry export -f requirements.txt --output req/requirements.bluetooth.txt --without-hashes --without-urls --with bluetooth

      - name: Save wheels and requirements as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{github.ref_name}}
          path: |
            dist
            req

      - name: Add artifact to release
        run: |
          echo "Uploading artifacts to release ${{ needs.trigger-release.outputs.tag_name }}"
          gh release upload ${{ needs.trigger-release.outputs.tag_name }} ./dist/*.whl

  publish-docker:
    name: "Publish package to DockerHub"
    needs: [ publish-github, trigger-release ]
    if: needs.trigger-release.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      # ------------------------------------------------
      # Checkout and and download package
      # ------------------------------------------------
      - uses: actions/checkout@v4

      - name: Download requirements
        uses: actions/download-artifact@v4
        with:
          name: ${{github.ref_name}}

      - name: Setup reqs
        run: |
          cp req/* .

      # ------------------------------------------------
      # Setup Docker ad Qemu
      # ------------------------------------------------
      - name: SetUp QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ------------------------------------------------
      # Build images for nuvlaedge
      # ------------------------------------------------
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=$(date --utc +%FT%T.%3NZ)
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          push: true
          tags: >
            nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }},
            nuvlaedge/${{ github.event.repository.name }}:latest,
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }},
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:latest,
            sixsq/${{ github.event.repository.name }}:${{ github.ref_name }},
            sixsq/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
