# Releases a new version of the NuvlaEdge
# A new tag has to be manually trigger. After that, this workflow tests and validates the new release
# creating the release

name: "NuvlaEdge Release"


concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    tags:
      - "**"

jobs:
  build-nuvlaedge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SetUp python interpreter
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # cache: 'pip'

      - name: Load cached poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Build library
        id: build
        run: |
          poetry build --no-interaction
          mkdir req/
          poetry export -f requirements.txt --output req/requirements.txt --without-hashes --without-urls --only main
          poetry export -f requirements.txt --output req/requirements.agent.txt --without-hashes --without-urls --only agent
          poetry export -f requirements.txt --output req/requirements.kubernetes.txt --without-hashes --without-urls --only kubernetes
          poetry export -f requirements.txt --output req/requirements.job-engine.txt --without-hashes --without-urls --only job-engine
          poetry export -f requirements.txt --output req/requirements.system-manager.txt --without-hashes --without-urls --only system-manager
          poetry export -f requirements.txt --output req/requirements.network.txt --without-hashes --without-urls --only network
          poetry export -f requirements.txt --output req/requirements.modbus.txt --without-hashes --without-urls --only modbus
          poetry export -f requirements.txt --output req/requirements.gpu.txt --without-hashes --without-urls --only gpu
          poetry export -f requirements.txt --output req/requirements.bluetooth.txt --without-hashes --without-urls --only bluetooth

      - name: Build test requirements
        run: ./generate-requirements.sh req

      - name: Save wheels and requirements as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{github.ref_name}}
          path: |
            dist
            req

  unittests:
    needs: build-nuvlaedge
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SetUp python interpreter
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # cache: 'pip'

      - name: Download requirements
        uses: actions/download-artifact@v4
        with:
          name: ${{github.ref_name}}

      - name: Install Tox
        run: |
          cp req/requirements.tests.txt requirements.tests.txt
          pip install tox

      - name: Run UnitTests
        run: tox

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: "| Unit Tests Results: Common Library |"
          files: test-report.xml

  validation-matrix:
    # Sets up the different combinations for the validation to generate the strategy matrix
    runs-on: ubuntu-latest
    needs: unittests
    outputs:
      boards: ${{ steps.set-boards.outputs.boards }}
      tests: ${{ steps.set-tests.outputs.tests }}
    steps:
      - id: set-boards
        run: |
          echo "boards=${{ vars.TESTBED_BOARDS }}" >> $GITHUB_OUTPUT

      - id: set-tests
        run: |
          echo "tests=${{ vars.VALIDATION_TESTS }}" >> $GITHUB_OUTPUT

  run-validator:
    needs: validation-matrix
    strategy:
      matrix:
        board-config: ${{ fromJSON(needs.validation-matrix.outputs.boards) }}
        validation-type: ${{ fromJSON(needs.validation-matrix.outputs.tests) }}
      fail-fast: false
    runs-on: ${{ matrix.board-config }}

    steps:
      - name: Run Validation
        run: |
          echo "Running validation ${{ matrix.validation-type }} on board ${{ matrix.board-config }}"
#
#
  release-package:
    name: 'Build and release code base'
    needs: run-validator
    runs-on: ubuntu-latest
    steps:
      # ------------------------------------------------
      # Checkout and and download package
      # ------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download requirements
        uses: actions/download-artifact@v4
        with:
          name: ${{github.ref_name}}

      - name: Release package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Releasing NuvlaEdge version ${{ github.ref_name }}"
          gh release create ${{ github.ref }} --generate-notes ./dist/*
        

  release-image:
    needs: run-validator
    runs-on: ubuntu-latest

    steps:
      - name: Set env
        shell: bash
        run: echo "BUILD_TIME=$(date --utc +%FT%T.%3NZ)" >> $GITHUB_ENV
      # ------------------------------------------------
      # Checkout and and download package
      # ------------------------------------------------
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Do not download forked repos atm

      - name: Download requirements
        uses: actions/download-artifact@v4
        with:
          name: ${{github.ref_name}}

      - name: Setup reqs
        run: |
          cp req/* .

      # ------------------------------------------------
      # Setup Docker ad Qemu
      # ------------------------------------------------
      - name: SetUp QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ------------------------------------------------
      # Build images for nuvlaedge
      # ------------------------------------------------
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
            PYDANTIC_VERSION=${{ vars.PYDANTIC_VERSION }}
          push: true
          tags: >
            nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }},
            nuvlaedge/${{ github.event.repository.name }}:latest,
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }},
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:latest,
            sixsq/${{ github.event.repository.name }}:${{ github.ref_name }},
            sixsq/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push slim-docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.slim-docker
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8
          build-args: |
            GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            GIT_BUILD_TIME=${{ env.BUILD_TIME }}
            GIT_COMMIT_ID=${{ github.sha }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}
            GITHUB_RUN_ID=${{ github.run_id }}
            PROJECT_URL=${{ github.server_url }}/${{ github.repository }}
            PACKAGE_NAME=${{ env.PACKAGE_NAME }}
            PYDANTIC_VERSION=${{ vars.PYDANTIC_VERSION }}
          push: true
          tags: >
            nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }}-slim-docker,
            nuvlaedge/${{ github.event.repository.name }}:latest-slim-docker,
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:${{ github.ref_name }}-slim-docker,
            ghcr.io/nuvlaedge/${{ github.event.repository.name }}:latest-slim-docker,
            sixsq/${{ github.event.repository.name }}:${{ github.ref_name }}-slim-docker,
            sixsq/${{ github.event.repository.name }}:latest-slim-docker
          cache-from: type=gha
          cache-to: type=gha,mode=max


